/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { compareFaces } from '../fn/facial-recognition-controller/compare-faces';
import { CompareFaces$Params } from '../fn/facial-recognition-controller/compare-faces';
import { uploadImage } from '../fn/facial-recognition-controller/upload-image';
import { UploadImage$Params } from '../fn/facial-recognition-controller/upload-image';
import { verify } from '../fn/facial-recognition-controller/verify';
import { Verify$Params } from '../fn/facial-recognition-controller/verify';

@Injectable({ providedIn: 'root' })
export class FacialRecognitionControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `verify()` */
  static readonly VerifyPath = '/api/facial/verify';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `verify()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  verify$Response(params: Verify$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return verify(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `verify$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  verify(params: Verify$Params, context?: HttpContext): Observable<string> {
    return this.verify$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }
  uploadFormData(formData: FormData): Observable<any> {
    const uploadUrl = `${this.rootUrl}/api/facial/upload`;
    return this.http.post(uploadUrl, formData); // ðŸ“Œ HttpClient comprend automatiquement multipart avec FormData
  }
  

  /** Path part for operation `uploadImage()` */
  static readonly UploadImagePath = '/api/facial/upload';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `uploadImage()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  uploadImage$Response(params: UploadImage$Params, context?: HttpContext): Observable<StrictHttpResponse<{
[key: string]: string;
}>> {
    return uploadImage(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `uploadImage$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  uploadImage(params: UploadImage$Params, context?: HttpContext): Observable<{
[key: string]: string;
}> {
    return this.uploadImage$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
[key: string]: string;
}>): {
[key: string]: string;
} => r.body)
    );
  }

  /** Path part for operation `compareFaces()` */
  static readonly CompareFacesPath = '/api/facial/compare-faces';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `compareFaces()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  compareFaces$Response(params?: CompareFaces$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return compareFaces(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `compareFaces$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  compareFaces(params?: CompareFaces$Params, context?: HttpContext): Observable<{
}> {
    return this.compareFaces$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

}
